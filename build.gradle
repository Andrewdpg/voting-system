plugins {
    id 'com.zeroc.gradle.ice-builder.slice' version '1.5.0' apply false
}

subprojects {

    // Apply Java and Ice Builder plug-ins to all sub-projects
    apply plugin: 'java'
    apply plugin: 'com.zeroc.gradle.ice-builder.slice'

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }
        test {
            java {
                srcDirs = ['src/test/java/']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }

    // Both Client and Server projects share the Contract.ice Slice definitions
    slice {
        java {
            files = [file("../Contract.ice")]
        }
    }

    // Use Ice JAR files from maven central repository
    repositories {
        mavenCentral()
    }

    // Both Client and Server depend only on Ice JAR
    dependencies {
        implementation 'com.zeroc:ice:3.7.6'
        implementation 'com.zeroc:icegrid:3.7.6'
        runtimeOnly 'com.zeroc:icegrid:3.7.6'
        implementation 'com.zaxxer:HikariCP:6.0.0'
        implementation 'org.postgresql:postgresql:42.2.20'
        implementation 'org.slf4j:slf4j-api:1.7.30'
        implementation 'org.slf4j:slf4j-simple:1.7.30'
        implementation 'org.apache.poi:poi-ooxml:5.2.3'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
        testImplementation 'junit:junit:4.13.2'
        testImplementation 'org.mockito:mockito-core:4.8.1'
        testImplementation 'org.mockito:mockito-inline:4.8.1'
        testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
        testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
    }

    // Create a JAR file with the appropriate Main-Class and Class-Path attributes
    jar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest {
            attributes(
                "Main-Class": project.name.capitalize(),
                "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' ')
            )
        }
        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    test {
        useJUnitPlatform()
    }
}